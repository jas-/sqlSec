#!/bin/bash

# Installation script for sqlSec
# Jason Gerfen <jason.gerfen@gmail.com>

# Some printing options
e="echo -en"
txt_green='\e[1;32m'
txt_yellow='\e[1;33m'
txt_red='\e[1;31m'
txt_gray='\e[1;90m'
txt_reset='\e[0m'
txt_gray_ps3=$'\e[90m'
txt_reset_ps3=$'\e[0m'

# Tests disabled by default
test=0

# Legacy encryption
legacy=0

# Show usage menu
usage()
{
  cat << EOF

Usage: $0 [options]

OPTIONS:
   -h      Show this message
   -t      Install test database & perform automated test suite

EOF
}

# Create a client.cnf for credentials
client()
{
  host="${1}"
  user="${2}"
  pass="${3}"

  cat << EOF > .install/client.cnf
[client]
user=${user}
password=${pass}
host=${host}
EOF
}

# Y/N prompt function
function ask {
 while true; do
  if [ "${2:-}" = "Y" ]; then
   prompt="Y/n"
   default=Y
  elif [ "${2:-}" = "N" ]; then
   prompt="y/N"
   default=N
  else
   prompt="y/n"
   default=
  fi

  read -p "$1 [$prompt] " REPLY

  if [ -z "$REPLY" ]; then
   REPLY=$default
  fi
  case "$REPLY" in
   Y*|y*) return 0 ;;
   N*|n*) return 1 ;;
  esac
 done
}

# Execute a MySQL command
exec_cmd()
{
  cmd="${1}"
  [ "${2}" != "" ] && db="${2}"

  echo $(mysql --defaults-extra-file=.install/client.cnf ${db} -sss -e "${cmd}")
}

# Import MySQL file
import_sql()
{
  file="${1}"
  [ "${2}" != "" ] && db="${2}"

  if [ ! -f "${file}" ] ; then
    return 1
  fi

  echo $(mysql --defaults-extra-file=.install/client.cnf ${db} < ${file})
}

# Cleanup temporary files
cleanup(){
 echo "Cleaning up..."
 rm -fr .install/
 exit
}

# Create selection of table fields
fields(){
 table="${1}"
 PS3="${txt_gray_ps3}Select field to enable encryption: ${txt_reset_ps3}"
 tables=$(exec_cmd "describe ${table}"|awk '{print $1}')
 #tables=$(mysql --defaults-extra-file=.install/client.cnf ${name} -sss -e "describe ${table}" | awk '{print $1}')
 tables+=" Main"
 tables+=" Quit"
 select field in ${tables}; do
  case ${field} in
   "Main")
    tables
    break
    ;;
   "Quit")
    break
    ;;
   *)
    if [ -n "${field}" ]; then
     # Make sure there aren't any foreign keys on the field selected or we won't be able to convert the field to a BLOB column type
     chk=$(exec_cmd "select count(*) AS total from information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = "'${name}'" AND TABLE_NAME = "'${table}'" AND COLUMN_NAME = "'${field}'";")
     #chk=$(mysql --defaults-extra-file=.install/client.cnf ${name} -sss -e 'select count(*) AS total from information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = "'${name}'" AND TABLE_NAME = "'${table}'" AND COLUMN_NAME = "'${field}'";')
     if [ "${chk}" -gt 0 ] ; then
       ${e} "${txt_red}A foreign key constraint exists for this field. Cannot use '${table}.${field}'${txt_reset}\n"
     else
       exec_cmd "ALTER TABLE `'${table}'` MODIFY `'${field}'` BLOB"
       #mysql --defaults-extra-file=.install/client.cnf ${name} -sss -e 'ALTER TABLE `'${table}'` MODIFY `'${field}'` BLOB'
       exec_cmd "INSERT INTO `sqlSec_map` (`tbl`, `field`) VALUES ("'${table}'", "'${field}'")"
       #mysql --defaults-extra-file=.install/client.cnf ${name} -sss -e 'INSERT INTO `sqlSec_map` (`tbl`, `field`) VALUES ("'${table}'", "'${field}'")'
     fi
     fields ${table}
    else
     echo "Invalid choice"
     fields ${table}
    fi
    ;;
  esac
 done
}

# Create selection of tables
tables(){
 PS3="${txt_gray_ps3}Select table to view fields: ${txt_reset_ps3}"
 tables=$(exec_cmd "show tables"|awk '{ print $1 }' | grep -v "sqlSec" | grep -v "view")
 #tables=$(mysql --defaults-extra-file=.install/client.cnf ${name} -sss -e "show tables" | awk '{ print $1 }' | grep -v "sqlSec" | grep -v "view")
 tables+=" Quit"
 select table in ${tables}; do
  case ${table} in
   "Quit")
    cleanup
    ;;
   *)
    if [ -n "${table}" ]; then
     fields ${table}
    else
     echo "Invalid choice"
     fields ${table}
    fi
    ;;
  esac
 done
}

# Initial env setup
setup_env()
{
  # Setup an environement based on the templates
  echo -ne "  Creating necessary database creation objects..."
  if [ -d ".install" ] ;
  then
    touch .install/database-schema.sql
  else
    mkdir .install
  fi
  cp -fr templates/*.sql .install/
  echo "done"
  echo ""
}

init_conn()
{
  # Begin questioning about system
  ${e} "${txt_green}Database installation credentials${txt_reset}\n"

  read -p "  Enter MySQL username: " mu;
  read -sp "  Enter root MySQL password: " pass;
  echo ""
  echo ""

  # Create a connection file
  client "${server}" "${mu}" "${pass}"
}

# Determine if MySQL is < 5.6
check_legacy()
{
  # Show warning if old version of MySQL with legacy encryption
  mysql_ver=$(exec_cmd "SELECT @@version"|tr -cd [:digit:])
  #mysql_ver=$(mysql --defaults-extra-file=.install/client.cnf mysql -sss -e 'SELECT @@version'|tr -cd [:digit:])

  if [[ "${mysql_ver}" =~ error ]] ; then
    ${e} "${txt_red}Error!${txt_reset}\n"
    ${e} "${txt_yellow}  MySQL credentials were invalid, could not connect${txt_reset}\n"
  fi

  if [ "${mysql_ver:0:3}" -lt 560 ] ; then
    legacy=1
    ${e} "${txt_red}Warning!${txt_reset}\n"
    ${e} "${txt_yellow}  Your MySQL installation does not support the latest${txt_reset}\n"
    ${e} "${txt_yellow}  encryption support, it is suggested you upgrade < 5.6.x${txt_reset}\n"
    echo ""
  fi
}

# sqlSec credentails
generate_credentials()
{
  # Generate some credentials for the sqlSec stored procedures
  ${e} "${txt_green}Database settings${txt_reset}\n"

  read -p "  Database server name [localhost]: " server
  sed -i "s/{SERVER}/${server:=localhost}/g" .install/*.sql

  client "${server}" "${mu}" "${pass}"

  sp_user="$(openssl rand -hex 6)";
  sed -i "s/{SP}/${sp_user}/g" .install/*.sql

  sp_pass="$(openssl rand -hex 12)";
  sed -i "s/{SP_PW}/${sp_pass}/g" .install/*.sql

  key="$(openssl rand -hex 128)";
  sed -i "s/{KEY}/${key}/g" .install/*.sql

  ver="$(openssl rand -hex 8)";
  sed -i "s/{VER}/${ver}/g" .install/*.sql
}

# Create test database if asked
create_test_db()
{
  cp -fr tests/*.sql .install/

  # User defined database settings
  echo ""
  ${e} "${txt_green}Test environment settings${txt_reset}\n"

  read -p "  Test server name [localhost]: " server
  sed -i "s/{SERVER}/${server:=localhost}/g" .install/*.sql

  read -p "  Test database name [PKI]: " name
  sed -i "s/{NAME}/${name:=PKI}/g" .install/*.sql
  echo ""

  read -p "  Test database read-write username [Administrator]: " admin
  sed -i "s/{ADMIN}/${admin:=Administrator}/g" .install/*.sql

  read -sp "  Test database read-write password [Random]: " admin_pass
  tap="$(openssl rand -hex 16)";
  sed -i "s/{ADMIN_PW}/${admin_pass:=${tap}}/g" .install/*.sql

  echo ""
  read -p "  Test database read-only username [Read_Only]: " ro
  sed -i "s/{RO}/${ro:=Read_Only}/g" .install/*.sql

  read -sp "  Test database read-only password [Random]: " ro_pass
  tup="$(openssl rand -hex 16)";
  sed -i "s/{RO_PW}/${ro_pass:=${tup}}/g" .install/*.sql
  echo ""

  echo ""
  ${e} "${txt_green}Test database account info${txt_reset}\n"

  echo "  Test database server: ${server}"
  echo "  Test database name: ${name}"
  echo "  Test database read-write account: ${admin}"
  echo "  Test database read-write password: ${admin_pass}"
  echo "  Test database read-only account: ${ro}"
  echo "  Test database read-only password: ${ro_pass}"

  client "${server}" "${mu}" "${pass}"

  sed -i "s/{SP}/${sp_user}/g" .install/*.sql
  sed -i "s/{SP_PW}/${sp_pass}/g" .install/*.sql

  import_sql .install/test-database.sql
  #mysql --defaults-extra-file=.install/client.cnf < .install/test-database.sql
  import_sql .install/test-procs.sql
  #mysql --defaults-extra-file=.install/client.cnf < .install/test-procs.sql
  echo ""
}

# Perform a backup of the specified database
do_backup()
{
  # Ensure we ask for a backup
  ${e} "${txt_green}Create backup${txt_reset}\n"

  data_dir=$(exec_cmd "SELECT @@datadir as data_dir")
  #data_dir=$(mysql --defaults-extra-file=.install/client.cnf ${name} -sss -e "SELECT @@datadir AS data_dir")
  backup_dir="${data_dir}${name}"
  read -p "  Backup directory [${backup_dir}]: " buf
  sed -i "s|{BUF}|${buf:=${backup_dir}}|g" .install/*.sql

  if ask "  Create a backup? " Y; then
   d=$(date +"%Y-%m-%d")
   mysqldump --defaults-extra-file=.install/client.cnf --routines ${name} > ${buf}/${d}-${name}.sql
   echo "  Backup created... ${buf}/${d}-${name}.sql"
  fi
  echo ""
}

# Install & configure
setup()
{
  # Begin installing sqlSec
  ${e} "${txt_green}Configure database${txt_reset}\n"

  PS3="${txt_gray_ps3}Select database to use: ${txt_reset_ps3}"
  db=$(exec_cmd "show databases"|grep -v "sys"|grep -v "information"|grep -v "performance"|grep -v "mysql"|grep -v "view"|grep -v "sqlSec*")
  #db=$(mysql --defaults-extra-file=.install/client.cnf ${name} -sss -e "show databases"|grep -v "sys"|grep -v "information"|grep -v "performance"|grep -v "mysql"|grep -v "view"|grep -v "sqlSec*")

  if [[ "${db}" =~ ERROR ]] ; then
    echo "Could not connect to database" && exit 1
  fi

  ${e} "${txt_red}Warning!${txt_reset}\n"
  ${e} "${txt_yellow}  Changes will be made to the database, table and fields${txt_reset}\n"

  if ask "  Do you wish to continue? " N; then
    echo "Exiting..." && exit 1
  fi
  echo ""

  select name in ${db}; do
   if [ -n "${name}" ]; then
    sed -i "s/{NAME}/${name}/g" .install/*.sql
    echo ""
    break
   fi
  done

  do_backup

  # Get started
  ${e} "${txt_green}sqlSec specific operations${txt_reset}\n"

  echo -ne "  Adding database sqlSec tables, users & permissions..."
  import_sql .install/sqlSec-schema.sql ${name}
  #mysql --defaults-extra-file=.install/client.cnf ${name} < .install/sqlSec-schema.sql
  exec_cmd "FLUSH PRIVILEGES"
  #mysql --defaults-extra-file=.install/client.cnf ${name} -e 'FLUSH PRIVILEGES'
  echo "done"

  echo -ne "  Creating key generation procedures..."
  if [ "${mysql_ver:0:3}" -lt 560 ] ; then
    import_sql .install/sqlSec-keyring-legacy.sql ${name}
    #mysql --defaults-extra-file=.install/client.cnf ${name} < .install/sqlSec-keyring-legacy.sql
  else
    import_sql .install/sqlSec-keyring-modern.sql ${name}
    #mysql --defaults-extra-file=.install/client.cnf ${name} < .install/sqlSec-keyring-modern.sql
  fi
  echo "done"

  # Need to add a key management option here (obscuring the key is not the right way)

  echo -ne "  Creating key rotation procedures"
  import_sql .install/sqlSec-procs.sql ${name}
  #mysql --defaults-extra-file=.install/client.cnf ${name} < .install/sqlSec-procs.sql
  echo "done"
  echo ""

  ${e} "${txt_green}Specify encrypted fields for database: ${name}${txt_reset}\n"
  tables
}

# Main subroutine
main()
{
  ${e} "${txt_green}sqlSec - A symmetric encryption / data rotation tool for MySQL${txt_reset}\n"
  echo ""

  setup_env
  init_conn
  check_legacy
  generate_credentials

  if [ "${test}" == 1 ] ; then
    create_test_db
  fi

  setup
  # Print randomly generated sqlSec user details

}

# Parse and apply specified arugments
while getopts “ht” OPTION ; do
  case $OPTION in
    h)
      usage && exit 1 ;;
    t)
      test=1 ;;
    ?)
      usage && exit 1 ;;
  esac
done

# Robot, do work
main
